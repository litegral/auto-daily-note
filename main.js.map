{
  "version": 3,
  "sources": ["node_modules/.pnpm/obsidian-daily-notes-interf_64c32acf3342e8a00f9afe521fa1dde2/node_modules/obsidian-daily-notes-interface/dist/main.js", "src/main.ts"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar obsidian = require('obsidian');\n\nconst DEFAULT_DAILY_NOTE_FORMAT = \"YYYY-MM-DD\";\nconst DEFAULT_WEEKLY_NOTE_FORMAT = \"gggg-[W]ww\";\nconst DEFAULT_MONTHLY_NOTE_FORMAT = \"YYYY-MM\";\nconst DEFAULT_QUARTERLY_NOTE_FORMAT = \"YYYY-[Q]Q\";\nconst DEFAULT_YEARLY_NOTE_FORMAT = \"YYYY\";\n\nfunction shouldUsePeriodicNotesSettings(periodicity) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const periodicNotes = window.app.plugins.getPlugin(\"periodic-notes\");\n    return periodicNotes && periodicNotes.settings?.[periodicity]?.enabled;\n}\n/**\n * Read the user settings for the `daily-notes` plugin\n * to keep behavior of creating a new note in-sync.\n */\nfunction getDailyNoteSettings() {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { internalPlugins, plugins } = window.app;\n        if (shouldUsePeriodicNotesSettings(\"daily\")) {\n            const { format, folder, template } = plugins.getPlugin(\"periodic-notes\")?.settings?.daily || {};\n            return {\n                format: format || DEFAULT_DAILY_NOTE_FORMAT,\n                folder: folder?.trim() || \"\",\n                template: template?.trim() || \"\",\n            };\n        }\n        const { folder, format, template } = internalPlugins.getPluginById(\"daily-notes\")?.instance?.options || {};\n        return {\n            format: format || DEFAULT_DAILY_NOTE_FORMAT,\n            folder: folder?.trim() || \"\",\n            template: template?.trim() || \"\",\n        };\n    }\n    catch (err) {\n        console.info(\"No custom daily note settings found!\", err);\n    }\n}\n/**\n * Read the user settings for the `weekly-notes` plugin\n * to keep behavior of creating a new note in-sync.\n */\nfunction getWeeklyNoteSettings() {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const pluginManager = window.app.plugins;\n        const calendarSettings = pluginManager.getPlugin(\"calendar\")?.options;\n        const periodicNotesSettings = pluginManager.getPlugin(\"periodic-notes\")?.settings?.weekly;\n        if (shouldUsePeriodicNotesSettings(\"weekly\")) {\n            return {\n                format: periodicNotesSettings.format || DEFAULT_WEEKLY_NOTE_FORMAT,\n                folder: periodicNotesSettings.folder?.trim() || \"\",\n                template: periodicNotesSettings.template?.trim() || \"\",\n            };\n        }\n        const settings = calendarSettings || {};\n        return {\n            format: settings.weeklyNoteFormat || DEFAULT_WEEKLY_NOTE_FORMAT,\n            folder: settings.weeklyNoteFolder?.trim() || \"\",\n            template: settings.weeklyNoteTemplate?.trim() || \"\",\n        };\n    }\n    catch (err) {\n        console.info(\"No custom weekly note settings found!\", err);\n    }\n}\n/**\n * Read the user settings for the `periodic-notes` plugin\n * to keep behavior of creating a new note in-sync.\n */\nfunction getMonthlyNoteSettings() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const pluginManager = window.app.plugins;\n    try {\n        const settings = (shouldUsePeriodicNotesSettings(\"monthly\") &&\n            pluginManager.getPlugin(\"periodic-notes\")?.settings?.monthly) ||\n            {};\n        return {\n            format: settings.format || DEFAULT_MONTHLY_NOTE_FORMAT,\n            folder: settings.folder?.trim() || \"\",\n            template: settings.template?.trim() || \"\",\n        };\n    }\n    catch (err) {\n        console.info(\"No custom monthly note settings found!\", err);\n    }\n}\n/**\n * Read the user settings for the `periodic-notes` plugin\n * to keep behavior of creating a new note in-sync.\n */\nfunction getQuarterlyNoteSettings() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const pluginManager = window.app.plugins;\n    try {\n        const settings = (shouldUsePeriodicNotesSettings(\"quarterly\") &&\n            pluginManager.getPlugin(\"periodic-notes\")?.settings?.quarterly) ||\n            {};\n        return {\n            format: settings.format || DEFAULT_QUARTERLY_NOTE_FORMAT,\n            folder: settings.folder?.trim() || \"\",\n            template: settings.template?.trim() || \"\",\n        };\n    }\n    catch (err) {\n        console.info(\"No custom quarterly note settings found!\", err);\n    }\n}\n/**\n * Read the user settings for the `periodic-notes` plugin\n * to keep behavior of creating a new note in-sync.\n */\nfunction getYearlyNoteSettings() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const pluginManager = window.app.plugins;\n    try {\n        const settings = (shouldUsePeriodicNotesSettings(\"yearly\") &&\n            pluginManager.getPlugin(\"periodic-notes\")?.settings?.yearly) ||\n            {};\n        return {\n            format: settings.format || DEFAULT_YEARLY_NOTE_FORMAT,\n            folder: settings.folder?.trim() || \"\",\n            template: settings.template?.trim() || \"\",\n        };\n    }\n    catch (err) {\n        console.info(\"No custom yearly note settings found!\", err);\n    }\n}\n\n// Credit: @creationix/path.js\nfunction join(...partSegments) {\n    // Split the inputs into a list of path commands.\n    let parts = [];\n    for (let i = 0, l = partSegments.length; i < l; i++) {\n        parts = parts.concat(partSegments[i].split(\"/\"));\n    }\n    // Interpret the path commands to get the new resolved path.\n    const newParts = [];\n    for (let i = 0, l = parts.length; i < l; i++) {\n        const part = parts[i];\n        // Remove leading and trailing slashes\n        // Also remove \".\" segments\n        if (!part || part === \".\")\n            continue;\n        // Push new path segments.\n        else\n            newParts.push(part);\n    }\n    // Preserve the initial slash if there was one.\n    if (parts[0] === \"\")\n        newParts.unshift(\"\");\n    // Turn back into a single string path.\n    return newParts.join(\"/\");\n}\nfunction basename(fullPath) {\n    let base = fullPath.substring(fullPath.lastIndexOf(\"/\") + 1);\n    if (base.lastIndexOf(\".\") != -1)\n        base = base.substring(0, base.lastIndexOf(\".\"));\n    return base;\n}\nasync function ensureFolderExists(path) {\n    const dirs = path.replace(/\\\\/g, \"/\").split(\"/\");\n    dirs.pop(); // remove basename\n    if (dirs.length) {\n        const dir = join(...dirs);\n        if (!window.app.vault.getAbstractFileByPath(dir)) {\n            await window.app.vault.createFolder(dir);\n        }\n    }\n}\nasync function getNotePath(directory, filename) {\n    if (!filename.endsWith(\".md\")) {\n        filename += \".md\";\n    }\n    const path = obsidian.normalizePath(join(directory, filename));\n    await ensureFolderExists(path);\n    return path;\n}\nasync function getTemplateInfo(template) {\n    const { metadataCache, vault } = window.app;\n    const templatePath = obsidian.normalizePath(template);\n    if (templatePath === \"/\") {\n        return Promise.resolve([\"\", null]);\n    }\n    try {\n        const templateFile = metadataCache.getFirstLinkpathDest(templatePath, \"\");\n        const contents = await vault.cachedRead(templateFile);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const IFoldInfo = window.app.foldManager.load(templateFile);\n        return [contents, IFoldInfo];\n    }\n    catch (err) {\n        console.error(`Failed to read the daily note template '${templatePath}'`, err);\n        new obsidian.Notice(\"Failed to read the daily note template\");\n        return [\"\", null];\n    }\n}\n\n/**\n * dateUID is a way of weekly identifying daily/weekly/monthly notes.\n * They are prefixed with the granularity to avoid ambiguity.\n */\nfunction getDateUID(date, granularity = \"day\") {\n    const ts = date.clone().startOf(granularity).format();\n    return `${granularity}-${ts}`;\n}\nfunction removeEscapedCharacters(format) {\n    return format.replace(/\\[[^\\]]*\\]/g, \"\"); // remove everything within brackets\n}\n/**\n * XXX: When parsing dates that contain both week numbers and months,\n * Moment choses to ignore the week numbers. For the week dateUID, we\n * want the opposite behavior. Strip the MMM from the format to patch.\n */\nfunction isFormatAmbiguous(format, granularity) {\n    if (granularity === \"week\") {\n        const cleanFormat = removeEscapedCharacters(format);\n        return (/w{1,2}/i.test(cleanFormat) &&\n            (/M{1,4}/.test(cleanFormat) || /D{1,4}/.test(cleanFormat)));\n    }\n    return false;\n}\nfunction getDateFromFile(file, granularity) {\n    return getDateFromFilename(file.basename, granularity);\n}\nfunction getDateFromPath(path, granularity) {\n    return getDateFromFilename(basename(path), granularity);\n}\nfunction getDateFromFilename(filename, granularity) {\n    const getSettings = {\n        day: getDailyNoteSettings,\n        week: getWeeklyNoteSettings,\n        month: getMonthlyNoteSettings,\n        quarter: getQuarterlyNoteSettings,\n        year: getYearlyNoteSettings,\n    };\n    const format = getSettings[granularity]().format.split(\"/\").pop();\n    const noteDate = window.moment(filename, format, true);\n    if (!noteDate.isValid()) {\n        return null;\n    }\n    if (isFormatAmbiguous(format, granularity)) {\n        if (granularity === \"week\") {\n            const cleanFormat = removeEscapedCharacters(format);\n            if (/w{1,2}/i.test(cleanFormat)) {\n                return window.moment(filename, \n                // If format contains week, remove day & month formatting\n                format.replace(/M{1,4}/g, \"\").replace(/D{1,4}/g, \"\"), false);\n            }\n        }\n    }\n    return noteDate;\n}\n\nclass DailyNotesFolderMissingError extends Error {\n}\n/**\n * This function mimics the behavior of the daily-notes plugin\n * so it will replace {{date}}, {{title}}, and {{time}} with the\n * formatted timestamp.\n *\n * Note: it has an added bonus that it's not 'today' specific.\n */\nasync function createDailyNote(date) {\n    const app = window.app;\n    const { vault } = app;\n    const moment = window.moment;\n    const { template, format, folder } = getDailyNoteSettings();\n    const [templateContents, IFoldInfo] = await getTemplateInfo(template);\n    const filename = date.format(format);\n    const normalizedPath = await getNotePath(folder, filename);\n    try {\n        const createdFile = await vault.create(normalizedPath, templateContents\n            .replace(/{{\\s*date\\s*}}/gi, filename)\n            .replace(/{{\\s*time\\s*}}/gi, moment().format(\"HH:mm\"))\n            .replace(/{{\\s*title\\s*}}/gi, filename)\n            .replace(/{{\\s*(date|time)\\s*(([+-]\\d+)([yqmwdhs]))?\\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {\n            const now = moment();\n            const currentDate = date.clone().set({\n                hour: now.get(\"hour\"),\n                minute: now.get(\"minute\"),\n                second: now.get(\"second\"),\n            });\n            if (calc) {\n                currentDate.add(parseInt(timeDelta, 10), unit);\n            }\n            if (momentFormat) {\n                return currentDate.format(momentFormat.substring(1).trim());\n            }\n            return currentDate.format(format);\n        })\n            .replace(/{{\\s*yesterday\\s*}}/gi, date.clone().subtract(1, \"day\").format(format))\n            .replace(/{{\\s*tomorrow\\s*}}/gi, date.clone().add(1, \"d\").format(format)));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        app.foldManager.save(createdFile, IFoldInfo);\n        return createdFile;\n    }\n    catch (err) {\n        console.error(`Failed to create file: '${normalizedPath}'`, err);\n        new obsidian.Notice(\"Unable to create new file.\");\n    }\n}\nfunction getDailyNote(date, dailyNotes) {\n    return dailyNotes[getDateUID(date, \"day\")] ?? null;\n}\nfunction getAllDailyNotes() {\n    /**\n     * Find all daily notes in the daily note folder\n     */\n    const { vault } = window.app;\n    const { folder } = getDailyNoteSettings();\n    const dailyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));\n    if (!dailyNotesFolder) {\n        throw new DailyNotesFolderMissingError(\"Failed to find daily notes folder\");\n    }\n    const dailyNotes = {};\n    obsidian.Vault.recurseChildren(dailyNotesFolder, (note) => {\n        if (note instanceof obsidian.TFile) {\n            const date = getDateFromFile(note, \"day\");\n            if (date) {\n                const dateString = getDateUID(date, \"day\");\n                dailyNotes[dateString] = note;\n            }\n        }\n    });\n    return dailyNotes;\n}\n\nclass WeeklyNotesFolderMissingError extends Error {\n}\nfunction getDaysOfWeek() {\n    const { moment } = window;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let weekStart = moment.localeData()._week.dow;\n    const daysOfWeek = [\n        \"sunday\",\n        \"monday\",\n        \"tuesday\",\n        \"wednesday\",\n        \"thursday\",\n        \"friday\",\n        \"saturday\",\n    ];\n    while (weekStart) {\n        daysOfWeek.push(daysOfWeek.shift());\n        weekStart--;\n    }\n    return daysOfWeek;\n}\nfunction getDayOfWeekNumericalValue(dayOfWeekName) {\n    return getDaysOfWeek().indexOf(dayOfWeekName.toLowerCase());\n}\nasync function createWeeklyNote(date) {\n    const { vault } = window.app;\n    const { template, format, folder } = getWeeklyNoteSettings();\n    const [templateContents, IFoldInfo] = await getTemplateInfo(template);\n    const filename = date.format(format);\n    const normalizedPath = await getNotePath(folder, filename);\n    try {\n        const createdFile = await vault.create(normalizedPath, templateContents\n            .replace(/{{\\s*(date|time)\\s*(([+-]\\d+)([yqmwdhs]))?\\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {\n            const now = window.moment();\n            const currentDate = date.clone().set({\n                hour: now.get(\"hour\"),\n                minute: now.get(\"minute\"),\n                second: now.get(\"second\"),\n            });\n            if (calc) {\n                currentDate.add(parseInt(timeDelta, 10), unit);\n            }\n            if (momentFormat) {\n                return currentDate.format(momentFormat.substring(1).trim());\n            }\n            return currentDate.format(format);\n        })\n            .replace(/{{\\s*title\\s*}}/gi, filename)\n            .replace(/{{\\s*time\\s*}}/gi, window.moment().format(\"HH:mm\"))\n            .replace(/{{\\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\\s*:(.*?)}}/gi, (_, dayOfWeek, momentFormat) => {\n            const day = getDayOfWeekNumericalValue(dayOfWeek);\n            return date.weekday(day).format(momentFormat.trim());\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.app.foldManager.save(createdFile, IFoldInfo);\n        return createdFile;\n    }\n    catch (err) {\n        console.error(`Failed to create file: '${normalizedPath}'`, err);\n        new obsidian.Notice(\"Unable to create new file.\");\n    }\n}\nfunction getWeeklyNote(date, weeklyNotes) {\n    return weeklyNotes[getDateUID(date, \"week\")] ?? null;\n}\nfunction getAllWeeklyNotes() {\n    const weeklyNotes = {};\n    if (!appHasWeeklyNotesPluginLoaded()) {\n        return weeklyNotes;\n    }\n    const { vault } = window.app;\n    const { folder } = getWeeklyNoteSettings();\n    const weeklyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));\n    if (!weeklyNotesFolder) {\n        throw new WeeklyNotesFolderMissingError(\"Failed to find weekly notes folder\");\n    }\n    obsidian.Vault.recurseChildren(weeklyNotesFolder, (note) => {\n        if (note instanceof obsidian.TFile) {\n            const date = getDateFromFile(note, \"week\");\n            if (date) {\n                const dateString = getDateUID(date, \"week\");\n                weeklyNotes[dateString] = note;\n            }\n        }\n    });\n    return weeklyNotes;\n}\n\nclass MonthlyNotesFolderMissingError extends Error {\n}\n/**\n * This function mimics the behavior of the daily-notes plugin\n * so it will replace {{date}}, {{title}}, and {{time}} with the\n * formatted timestamp.\n *\n * Note: it has an added bonus that it's not 'today' specific.\n */\nasync function createMonthlyNote(date) {\n    const { vault } = window.app;\n    const { template, format, folder } = getMonthlyNoteSettings();\n    const [templateContents, IFoldInfo] = await getTemplateInfo(template);\n    const filename = date.format(format);\n    const normalizedPath = await getNotePath(folder, filename);\n    try {\n        const createdFile = await vault.create(normalizedPath, templateContents\n            .replace(/{{\\s*(date|time)\\s*(([+-]\\d+)([yqmwdhs]))?\\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {\n            const now = window.moment();\n            const currentDate = date.clone().set({\n                hour: now.get(\"hour\"),\n                minute: now.get(\"minute\"),\n                second: now.get(\"second\"),\n            });\n            if (calc) {\n                currentDate.add(parseInt(timeDelta, 10), unit);\n            }\n            if (momentFormat) {\n                return currentDate.format(momentFormat.substring(1).trim());\n            }\n            return currentDate.format(format);\n        })\n            .replace(/{{\\s*date\\s*}}/gi, filename)\n            .replace(/{{\\s*time\\s*}}/gi, window.moment().format(\"HH:mm\"))\n            .replace(/{{\\s*title\\s*}}/gi, filename));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.app.foldManager.save(createdFile, IFoldInfo);\n        return createdFile;\n    }\n    catch (err) {\n        console.error(`Failed to create file: '${normalizedPath}'`, err);\n        new obsidian.Notice(\"Unable to create new file.\");\n    }\n}\nfunction getMonthlyNote(date, monthlyNotes) {\n    return monthlyNotes[getDateUID(date, \"month\")] ?? null;\n}\nfunction getAllMonthlyNotes() {\n    const monthlyNotes = {};\n    if (!appHasMonthlyNotesPluginLoaded()) {\n        return monthlyNotes;\n    }\n    const { vault } = window.app;\n    const { folder } = getMonthlyNoteSettings();\n    const monthlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));\n    if (!monthlyNotesFolder) {\n        throw new MonthlyNotesFolderMissingError(\"Failed to find monthly notes folder\");\n    }\n    obsidian.Vault.recurseChildren(monthlyNotesFolder, (note) => {\n        if (note instanceof obsidian.TFile) {\n            const date = getDateFromFile(note, \"month\");\n            if (date) {\n                const dateString = getDateUID(date, \"month\");\n                monthlyNotes[dateString] = note;\n            }\n        }\n    });\n    return monthlyNotes;\n}\n\nclass QuarterlyNotesFolderMissingError extends Error {\n}\n/**\n * This function mimics the behavior of the daily-notes plugin\n * so it will replace {{date}}, {{title}}, and {{time}} with the\n * formatted timestamp.\n *\n * Note: it has an added bonus that it's not 'today' specific.\n */\nasync function createQuarterlyNote(date) {\n    const { vault } = window.app;\n    const { template, format, folder } = getQuarterlyNoteSettings();\n    const [templateContents, IFoldInfo] = await getTemplateInfo(template);\n    const filename = date.format(format);\n    const normalizedPath = await getNotePath(folder, filename);\n    try {\n        const createdFile = await vault.create(normalizedPath, templateContents\n            .replace(/{{\\s*(date|time)\\s*(([+-]\\d+)([yqmwdhs]))?\\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {\n            const now = window.moment();\n            const currentDate = date.clone().set({\n                hour: now.get(\"hour\"),\n                minute: now.get(\"minute\"),\n                second: now.get(\"second\"),\n            });\n            if (calc) {\n                currentDate.add(parseInt(timeDelta, 10), unit);\n            }\n            if (momentFormat) {\n                return currentDate.format(momentFormat.substring(1).trim());\n            }\n            return currentDate.format(format);\n        })\n            .replace(/{{\\s*date\\s*}}/gi, filename)\n            .replace(/{{\\s*time\\s*}}/gi, window.moment().format(\"HH:mm\"))\n            .replace(/{{\\s*title\\s*}}/gi, filename));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.app.foldManager.save(createdFile, IFoldInfo);\n        return createdFile;\n    }\n    catch (err) {\n        console.error(`Failed to create file: '${normalizedPath}'`, err);\n        new obsidian.Notice(\"Unable to create new file.\");\n    }\n}\nfunction getQuarterlyNote(date, quarterly) {\n    return quarterly[getDateUID(date, \"quarter\")] ?? null;\n}\nfunction getAllQuarterlyNotes() {\n    const quarterly = {};\n    if (!appHasQuarterlyNotesPluginLoaded()) {\n        return quarterly;\n    }\n    const { vault } = window.app;\n    const { folder } = getQuarterlyNoteSettings();\n    const quarterlyFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));\n    if (!quarterlyFolder) {\n        throw new QuarterlyNotesFolderMissingError(\"Failed to find quarterly notes folder\");\n    }\n    obsidian.Vault.recurseChildren(quarterlyFolder, (note) => {\n        if (note instanceof obsidian.TFile) {\n            const date = getDateFromFile(note, \"quarter\");\n            if (date) {\n                const dateString = getDateUID(date, \"quarter\");\n                quarterly[dateString] = note;\n            }\n        }\n    });\n    return quarterly;\n}\n\nclass YearlyNotesFolderMissingError extends Error {\n}\n/**\n * This function mimics the behavior of the daily-notes plugin\n * so it will replace {{date}}, {{title}}, and {{time}} with the\n * formatted timestamp.\n *\n * Note: it has an added bonus that it's not 'today' specific.\n */\nasync function createYearlyNote(date) {\n    const { vault } = window.app;\n    const { template, format, folder } = getYearlyNoteSettings();\n    const [templateContents, IFoldInfo] = await getTemplateInfo(template);\n    const filename = date.format(format);\n    const normalizedPath = await getNotePath(folder, filename);\n    try {\n        const createdFile = await vault.create(normalizedPath, templateContents\n            .replace(/{{\\s*(date|time)\\s*(([+-]\\d+)([yqmwdhs]))?\\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {\n            const now = window.moment();\n            const currentDate = date.clone().set({\n                hour: now.get(\"hour\"),\n                minute: now.get(\"minute\"),\n                second: now.get(\"second\"),\n            });\n            if (calc) {\n                currentDate.add(parseInt(timeDelta, 10), unit);\n            }\n            if (momentFormat) {\n                return currentDate.format(momentFormat.substring(1).trim());\n            }\n            return currentDate.format(format);\n        })\n            .replace(/{{\\s*date\\s*}}/gi, filename)\n            .replace(/{{\\s*time\\s*}}/gi, window.moment().format(\"HH:mm\"))\n            .replace(/{{\\s*title\\s*}}/gi, filename));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.app.foldManager.save(createdFile, IFoldInfo);\n        return createdFile;\n    }\n    catch (err) {\n        console.error(`Failed to create file: '${normalizedPath}'`, err);\n        new obsidian.Notice(\"Unable to create new file.\");\n    }\n}\nfunction getYearlyNote(date, yearlyNotes) {\n    return yearlyNotes[getDateUID(date, \"year\")] ?? null;\n}\nfunction getAllYearlyNotes() {\n    const yearlyNotes = {};\n    if (!appHasYearlyNotesPluginLoaded()) {\n        return yearlyNotes;\n    }\n    const { vault } = window.app;\n    const { folder } = getYearlyNoteSettings();\n    const yearlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));\n    if (!yearlyNotesFolder) {\n        throw new YearlyNotesFolderMissingError(\"Failed to find yearly notes folder\");\n    }\n    obsidian.Vault.recurseChildren(yearlyNotesFolder, (note) => {\n        if (note instanceof obsidian.TFile) {\n            const date = getDateFromFile(note, \"year\");\n            if (date) {\n                const dateString = getDateUID(date, \"year\");\n                yearlyNotes[dateString] = note;\n            }\n        }\n    });\n    return yearlyNotes;\n}\n\nfunction appHasDailyNotesPluginLoaded() {\n    const { app } = window;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const dailyNotesPlugin = app.internalPlugins.plugins[\"daily-notes\"];\n    if (dailyNotesPlugin && dailyNotesPlugin.enabled) {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const periodicNotes = app.plugins.getPlugin(\"periodic-notes\");\n    return periodicNotes && periodicNotes.settings?.daily?.enabled;\n}\n/**\n * XXX: \"Weekly Notes\" live in either the Calendar plugin or the periodic-notes plugin.\n * Check both until the weekly notes feature is removed from the Calendar plugin.\n */\nfunction appHasWeeklyNotesPluginLoaded() {\n    const { app } = window;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (app.plugins.getPlugin(\"calendar\")) {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const periodicNotes = app.plugins.getPlugin(\"periodic-notes\");\n    return periodicNotes && periodicNotes.settings?.weekly?.enabled;\n}\nfunction appHasMonthlyNotesPluginLoaded() {\n    const { app } = window;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const periodicNotes = app.plugins.getPlugin(\"periodic-notes\");\n    return periodicNotes && periodicNotes.settings?.monthly?.enabled;\n}\nfunction appHasQuarterlyNotesPluginLoaded() {\n    const { app } = window;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const periodicNotes = app.plugins.getPlugin(\"periodic-notes\");\n    return periodicNotes && periodicNotes.settings?.quarterly?.enabled;\n}\nfunction appHasYearlyNotesPluginLoaded() {\n    const { app } = window;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const periodicNotes = app.plugins.getPlugin(\"periodic-notes\");\n    return periodicNotes && periodicNotes.settings?.yearly?.enabled;\n}\nfunction getPeriodicNoteSettings(granularity) {\n    const getSettings = {\n        day: getDailyNoteSettings,\n        week: getWeeklyNoteSettings,\n        month: getMonthlyNoteSettings,\n        quarter: getQuarterlyNoteSettings,\n        year: getYearlyNoteSettings,\n    }[granularity];\n    return getSettings();\n}\nfunction createPeriodicNote(granularity, date) {\n    const createFn = {\n        day: createDailyNote,\n        month: createMonthlyNote,\n        week: createWeeklyNote,\n    };\n    return createFn[granularity](date);\n}\n\nexports.DEFAULT_DAILY_NOTE_FORMAT = DEFAULT_DAILY_NOTE_FORMAT;\nexports.DEFAULT_MONTHLY_NOTE_FORMAT = DEFAULT_MONTHLY_NOTE_FORMAT;\nexports.DEFAULT_QUARTERLY_NOTE_FORMAT = DEFAULT_QUARTERLY_NOTE_FORMAT;\nexports.DEFAULT_WEEKLY_NOTE_FORMAT = DEFAULT_WEEKLY_NOTE_FORMAT;\nexports.DEFAULT_YEARLY_NOTE_FORMAT = DEFAULT_YEARLY_NOTE_FORMAT;\nexports.appHasDailyNotesPluginLoaded = appHasDailyNotesPluginLoaded;\nexports.appHasMonthlyNotesPluginLoaded = appHasMonthlyNotesPluginLoaded;\nexports.appHasQuarterlyNotesPluginLoaded = appHasQuarterlyNotesPluginLoaded;\nexports.appHasWeeklyNotesPluginLoaded = appHasWeeklyNotesPluginLoaded;\nexports.appHasYearlyNotesPluginLoaded = appHasYearlyNotesPluginLoaded;\nexports.createDailyNote = createDailyNote;\nexports.createMonthlyNote = createMonthlyNote;\nexports.createPeriodicNote = createPeriodicNote;\nexports.createQuarterlyNote = createQuarterlyNote;\nexports.createWeeklyNote = createWeeklyNote;\nexports.createYearlyNote = createYearlyNote;\nexports.getAllDailyNotes = getAllDailyNotes;\nexports.getAllMonthlyNotes = getAllMonthlyNotes;\nexports.getAllQuarterlyNotes = getAllQuarterlyNotes;\nexports.getAllWeeklyNotes = getAllWeeklyNotes;\nexports.getAllYearlyNotes = getAllYearlyNotes;\nexports.getDailyNote = getDailyNote;\nexports.getDailyNoteSettings = getDailyNoteSettings;\nexports.getDateFromFile = getDateFromFile;\nexports.getDateFromPath = getDateFromPath;\nexports.getDateUID = getDateUID;\nexports.getMonthlyNote = getMonthlyNote;\nexports.getMonthlyNoteSettings = getMonthlyNoteSettings;\nexports.getPeriodicNoteSettings = getPeriodicNoteSettings;\nexports.getQuarterlyNote = getQuarterlyNote;\nexports.getQuarterlyNoteSettings = getQuarterlyNoteSettings;\nexports.getTemplateInfo = getTemplateInfo;\nexports.getWeeklyNote = getWeeklyNote;\nexports.getWeeklyNoteSettings = getWeeklyNoteSettings;\nexports.getYearlyNote = getYearlyNote;\nexports.getYearlyNoteSettings = getYearlyNoteSettings;\n", "import { App, Plugin, PluginManifest } from 'obsidian';\r\nimport {\r\n    getAllDailyNotes,\r\n    getDailyNote,\r\n    createDailyNote\r\n} from 'obsidian-daily-notes-interface';\r\n\r\nexport default class AutoDailyNotePlugin extends Plugin {\r\n    constructor(app: App, manifest: PluginManifest) {\r\n        super(app, manifest);\r\n    }\r\n\r\n    async onload() {\r\n        this.registerEvent(\r\n            this.app.workspace.on('layout-change', async () => {\r\n                await this.createDailyNoteIfNotExists();\r\n            })\r\n        );\r\n    }\r\n\r\n    async createDailyNoteIfNotExists() {\r\n        try {\r\n            const moment = window.moment();\r\n\r\n            // Get all existing daily notes\r\n            const dailyNotes = getAllDailyNotes();\r\n\r\n            // Check if daily note exists\r\n            const existingNote = getDailyNote(moment, dailyNotes);\r\n\r\n            // If note doesn't exist, create it\r\n            if (!existingNote) {\r\n                await createDailyNote(moment);\r\n                console.log('Daily note created');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating daily note:', error);\r\n        }\r\n    }\r\n\r\n    onunload() {\r\n        console.log('Auto Daily Note Plugin unloaded');\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAE5D,QAAI,WAAW,QAAQ,UAAU;AAEjC,QAAM,4BAA4B;AAClC,QAAM,6BAA6B;AACnC,QAAM,8BAA8B;AACpC,QAAM,gCAAgC;AACtC,QAAM,6BAA6B;AAEnC,aAAS,+BAA+B,aAAa;AAZrD;AAcI,YAAM,gBAAgB,OAAO,IAAI,QAAQ,UAAU,gBAAgB;AACnE,aAAO,mBAAiB,yBAAc,aAAd,mBAAyB,iBAAzB,mBAAuC;AAAA,IACnE;AAKA,aAAS,uBAAuB;AArBhC;AAsBI,UAAI;AAEA,cAAM,EAAE,iBAAiB,QAAQ,IAAI,OAAO;AAC5C,YAAI,+BAA+B,OAAO,GAAG;AACzC,gBAAM,EAAE,QAAAA,SAAQ,QAAAC,SAAQ,UAAAC,UAAS,MAAI,mBAAQ,UAAU,gBAAgB,MAAlC,mBAAqC,aAArC,mBAA+C,UAAS,CAAC;AAC9F,iBAAO;AAAA,YACH,QAAQF,WAAU;AAAA,YAClB,SAAQC,WAAA,gBAAAA,QAAQ,WAAU;AAAA,YAC1B,WAAUC,aAAA,gBAAAA,UAAU,WAAU;AAAA,UAClC;AAAA,QACJ;AACA,cAAM,EAAE,QAAQ,QAAQ,SAAS,MAAI,2BAAgB,cAAc,aAAa,MAA3C,mBAA8C,aAA9C,mBAAwD,YAAW,CAAC;AACzG,eAAO;AAAA,UACH,QAAQ,UAAU;AAAA,UAClB,SAAQ,iCAAQ,WAAU;AAAA,UAC1B,WAAU,qCAAU,WAAU;AAAA,QAClC;AAAA,MACJ,SACO,KAAK;AACR,gBAAQ,KAAK,wCAAwC,GAAG;AAAA,MAC5D;AAAA,IACJ;AAKA,aAAS,wBAAwB;AAhDjC;AAiDI,UAAI;AAEA,cAAM,gBAAgB,OAAO,IAAI;AACjC,cAAM,oBAAmB,mBAAc,UAAU,UAAU,MAAlC,mBAAqC;AAC9D,cAAM,yBAAwB,yBAAc,UAAU,gBAAgB,MAAxC,mBAA2C,aAA3C,mBAAqD;AACnF,YAAI,+BAA+B,QAAQ,GAAG;AAC1C,iBAAO;AAAA,YACH,QAAQ,sBAAsB,UAAU;AAAA,YACxC,UAAQ,2BAAsB,WAAtB,mBAA8B,WAAU;AAAA,YAChD,YAAU,2BAAsB,aAAtB,mBAAgC,WAAU;AAAA,UACxD;AAAA,QACJ;AACA,cAAM,WAAW,oBAAoB,CAAC;AACtC,eAAO;AAAA,UACH,QAAQ,SAAS,oBAAoB;AAAA,UACrC,UAAQ,cAAS,qBAAT,mBAA2B,WAAU;AAAA,UAC7C,YAAU,cAAS,uBAAT,mBAA6B,WAAU;AAAA,QACrD;AAAA,MACJ,SACO,KAAK;AACR,gBAAQ,KAAK,yCAAyC,GAAG;AAAA,MAC7D;AAAA,IACJ;AAKA,aAAS,yBAAyB;AA5ElC;AA8EI,YAAM,gBAAgB,OAAO,IAAI;AACjC,UAAI;AACA,cAAM,WAAY,+BAA+B,SAAS,OACtD,yBAAc,UAAU,gBAAgB,MAAxC,mBAA2C,aAA3C,mBAAqD,YACrD,CAAC;AACL,eAAO;AAAA,UACH,QAAQ,SAAS,UAAU;AAAA,UAC3B,UAAQ,cAAS,WAAT,mBAAiB,WAAU;AAAA,UACnC,YAAU,cAAS,aAAT,mBAAmB,WAAU;AAAA,QAC3C;AAAA,MACJ,SACO,KAAK;AACR,gBAAQ,KAAK,0CAA0C,GAAG;AAAA,MAC9D;AAAA,IACJ;AAKA,aAAS,2BAA2B;AAjGpC;AAmGI,YAAM,gBAAgB,OAAO,IAAI;AACjC,UAAI;AACA,cAAM,WAAY,+BAA+B,WAAW,OACxD,yBAAc,UAAU,gBAAgB,MAAxC,mBAA2C,aAA3C,mBAAqD,cACrD,CAAC;AACL,eAAO;AAAA,UACH,QAAQ,SAAS,UAAU;AAAA,UAC3B,UAAQ,cAAS,WAAT,mBAAiB,WAAU;AAAA,UACnC,YAAU,cAAS,aAAT,mBAAmB,WAAU;AAAA,QAC3C;AAAA,MACJ,SACO,KAAK;AACR,gBAAQ,KAAK,4CAA4C,GAAG;AAAA,MAChE;AAAA,IACJ;AAKA,aAAS,wBAAwB;AAtHjC;AAwHI,YAAM,gBAAgB,OAAO,IAAI;AACjC,UAAI;AACA,cAAM,WAAY,+BAA+B,QAAQ,OACrD,yBAAc,UAAU,gBAAgB,MAAxC,mBAA2C,aAA3C,mBAAqD,WACrD,CAAC;AACL,eAAO;AAAA,UACH,QAAQ,SAAS,UAAU;AAAA,UAC3B,UAAQ,cAAS,WAAT,mBAAiB,WAAU;AAAA,UACnC,YAAU,cAAS,aAAT,mBAAmB,WAAU;AAAA,QAC3C;AAAA,MACJ,SACO,KAAK;AACR,gBAAQ,KAAK,yCAAyC,GAAG;AAAA,MAC7D;AAAA,IACJ;AAGA,aAAS,QAAQ,cAAc;AAE3B,UAAI,QAAQ,CAAC;AACb,eAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,IAAI,GAAG,KAAK;AACjD,gBAAQ,MAAM,OAAO,aAAa,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,MACnD;AAEA,YAAM,WAAW,CAAC;AAClB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAI,GAAG,KAAK;AAC1C,cAAM,OAAO,MAAM,CAAC;AAGpB,YAAI,CAAC,QAAQ,SAAS;AAClB;AAAA;AAGA,mBAAS,KAAK,IAAI;AAAA,MAC1B;AAEA,UAAI,MAAM,CAAC,MAAM;AACb,iBAAS,QAAQ,EAAE;AAEvB,aAAO,SAAS,KAAK,GAAG;AAAA,IAC5B;AACA,aAAS,SAAS,UAAU;AACxB,UAAI,OAAO,SAAS,UAAU,SAAS,YAAY,GAAG,IAAI,CAAC;AAC3D,UAAI,KAAK,YAAY,GAAG,KAAK;AACzB,eAAO,KAAK,UAAU,GAAG,KAAK,YAAY,GAAG,CAAC;AAClD,aAAO;AAAA,IACX;AACA,aAAe,mBAAmB,MAAM;AAAA;AACpC,cAAM,OAAO,KAAK,QAAQ,OAAO,GAAG,EAAE,MAAM,GAAG;AAC/C,aAAK,IAAI;AACT,YAAI,KAAK,QAAQ;AACb,gBAAM,MAAM,KAAK,GAAG,IAAI;AACxB,cAAI,CAAC,OAAO,IAAI,MAAM,sBAAsB,GAAG,GAAG;AAC9C,kBAAM,OAAO,IAAI,MAAM,aAAa,GAAG;AAAA,UAC3C;AAAA,QACJ;AAAA,MACJ;AAAA;AACA,aAAe,YAAY,WAAW,UAAU;AAAA;AAC5C,YAAI,CAAC,SAAS,SAAS,KAAK,GAAG;AAC3B,sBAAY;AAAA,QAChB;AACA,cAAM,OAAO,SAAS,cAAc,KAAK,WAAW,QAAQ,CAAC;AAC7D,cAAM,mBAAmB,IAAI;AAC7B,eAAO;AAAA,MACX;AAAA;AACA,aAAe,gBAAgB,UAAU;AAAA;AACrC,cAAM,EAAE,eAAe,MAAM,IAAI,OAAO;AACxC,cAAM,eAAe,SAAS,cAAc,QAAQ;AACpD,YAAI,iBAAiB,KAAK;AACtB,iBAAO,QAAQ,QAAQ,CAAC,IAAI,IAAI,CAAC;AAAA,QACrC;AACA,YAAI;AACA,gBAAM,eAAe,cAAc,qBAAqB,cAAc,EAAE;AACxE,gBAAM,WAAW,MAAM,MAAM,WAAW,YAAY;AAEpD,gBAAM,YAAY,OAAO,IAAI,YAAY,KAAK,YAAY;AAC1D,iBAAO,CAAC,UAAU,SAAS;AAAA,QAC/B,SACO,KAAK;AACR,kBAAQ,MAAM,2CAA2C,YAAY,KAAK,GAAG;AAC7E,cAAI,SAAS,OAAO,wCAAwC;AAC5D,iBAAO,CAAC,IAAI,IAAI;AAAA,QACpB;AAAA,MACJ;AAAA;AAMA,aAAS,WAAW,MAAM,cAAc,OAAO;AAC3C,YAAM,KAAK,KAAK,MAAM,EAAE,QAAQ,WAAW,EAAE,OAAO;AACpD,aAAO,GAAG,WAAW,IAAI,EAAE;AAAA,IAC/B;AACA,aAAS,wBAAwB,QAAQ;AACrC,aAAO,OAAO,QAAQ,eAAe,EAAE;AAAA,IAC3C;AAMA,aAAS,kBAAkB,QAAQ,aAAa;AAC5C,UAAI,gBAAgB,QAAQ;AACxB,cAAM,cAAc,wBAAwB,MAAM;AAClD,eAAQ,UAAU,KAAK,WAAW,MAC7B,SAAS,KAAK,WAAW,KAAK,SAAS,KAAK,WAAW;AAAA,MAChE;AACA,aAAO;AAAA,IACX;AACA,aAAS,gBAAgB,MAAM,aAAa;AACxC,aAAO,oBAAoB,KAAK,UAAU,WAAW;AAAA,IACzD;AACA,aAAS,gBAAgB,MAAM,aAAa;AACxC,aAAO,oBAAoB,SAAS,IAAI,GAAG,WAAW;AAAA,IAC1D;AACA,aAAS,oBAAoB,UAAU,aAAa;AAChD,YAAM,cAAc;AAAA,QAChB,KAAK;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AACA,YAAM,SAAS,YAAY,WAAW,EAAE,EAAE,OAAO,MAAM,GAAG,EAAE,IAAI;AAChE,YAAM,WAAW,OAAO,OAAO,UAAU,QAAQ,IAAI;AACrD,UAAI,CAAC,SAAS,QAAQ,GAAG;AACrB,eAAO;AAAA,MACX;AACA,UAAI,kBAAkB,QAAQ,WAAW,GAAG;AACxC,YAAI,gBAAgB,QAAQ;AACxB,gBAAM,cAAc,wBAAwB,MAAM;AAClD,cAAI,UAAU,KAAK,WAAW,GAAG;AAC7B,mBAAO,OAAO;AAAA,cAAO;AAAA;AAAA,cAErB,OAAO,QAAQ,WAAW,EAAE,EAAE,QAAQ,WAAW,EAAE;AAAA,cAAG;AAAA,YAAK;AAAA,UAC/D;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAEA,QAAM,+BAAN,cAA2C,MAAM;AAAA,IACjD;AAQA,aAAeC,iBAAgB,MAAM;AAAA;AACjC,cAAM,MAAM,OAAO;AACnB,cAAM,EAAE,MAAM,IAAI;AAClB,cAAM,SAAS,OAAO;AACtB,cAAM,EAAE,UAAU,QAAQ,OAAO,IAAI,qBAAqB;AAC1D,cAAM,CAAC,kBAAkB,SAAS,IAAI,MAAM,gBAAgB,QAAQ;AACpE,cAAM,WAAW,KAAK,OAAO,MAAM;AACnC,cAAM,iBAAiB,MAAM,YAAY,QAAQ,QAAQ;AACzD,YAAI;AACA,gBAAM,cAAc,MAAM,MAAM,OAAO,gBAAgB,iBAClD,QAAQ,oBAAoB,QAAQ,EACpC,QAAQ,oBAAoB,OAAO,EAAE,OAAO,OAAO,CAAC,EACpD,QAAQ,qBAAqB,QAAQ,EACrC,QAAQ,4DAA4D,CAAC,GAAG,aAAa,MAAM,WAAW,MAAM,iBAAiB;AAC9H,kBAAM,MAAM,OAAO;AACnB,kBAAM,cAAc,KAAK,MAAM,EAAE,IAAI;AAAA,cACjC,MAAM,IAAI,IAAI,MAAM;AAAA,cACpB,QAAQ,IAAI,IAAI,QAAQ;AAAA,cACxB,QAAQ,IAAI,IAAI,QAAQ;AAAA,YAC5B,CAAC;AACD,gBAAI,MAAM;AACN,0BAAY,IAAI,SAAS,WAAW,EAAE,GAAG,IAAI;AAAA,YACjD;AACA,gBAAI,cAAc;AACd,qBAAO,YAAY,OAAO,aAAa,UAAU,CAAC,EAAE,KAAK,CAAC;AAAA,YAC9D;AACA,mBAAO,YAAY,OAAO,MAAM;AAAA,UACpC,CAAC,EACI,QAAQ,yBAAyB,KAAK,MAAM,EAAE,SAAS,GAAG,KAAK,EAAE,OAAO,MAAM,CAAC,EAC/E,QAAQ,wBAAwB,KAAK,MAAM,EAAE,IAAI,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC,CAAC;AAE7E,cAAI,YAAY,KAAK,aAAa,SAAS;AAC3C,iBAAO;AAAA,QACX,SACO,KAAK;AACR,kBAAQ,MAAM,2BAA2B,cAAc,KAAK,GAAG;AAC/D,cAAI,SAAS,OAAO,4BAA4B;AAAA,QACpD;AAAA,MACJ;AAAA;AACA,aAASC,cAAa,MAAM,YAAY;AArTxC;AAsTI,cAAO,gBAAW,WAAW,MAAM,KAAK,CAAC,MAAlC,YAAuC;AAAA,IAClD;AACA,aAASC,oBAAmB;AAIxB,YAAM,EAAE,MAAM,IAAI,OAAO;AACzB,YAAM,EAAE,OAAO,IAAI,qBAAqB;AACxC,YAAM,mBAAmB,MAAM,sBAAsB,SAAS,cAAc,MAAM,CAAC;AACnF,UAAI,CAAC,kBAAkB;AACnB,cAAM,IAAI,6BAA6B,mCAAmC;AAAA,MAC9E;AACA,YAAM,aAAa,CAAC;AACpB,eAAS,MAAM,gBAAgB,kBAAkB,CAAC,SAAS;AACvD,YAAI,gBAAgB,SAAS,OAAO;AAChC,gBAAM,OAAO,gBAAgB,MAAM,KAAK;AACxC,cAAI,MAAM;AACN,kBAAM,aAAa,WAAW,MAAM,KAAK;AACzC,uBAAW,UAAU,IAAI;AAAA,UAC7B;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAEA,QAAM,gCAAN,cAA4C,MAAM;AAAA,IAClD;AACA,aAAS,gBAAgB;AACrB,YAAM,EAAE,OAAO,IAAI;AAEnB,UAAI,YAAY,OAAO,WAAW,EAAE,MAAM;AAC1C,YAAM,aAAa;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AACA,aAAO,WAAW;AACd,mBAAW,KAAK,WAAW,MAAM,CAAC;AAClC;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,2BAA2B,eAAe;AAC/C,aAAO,cAAc,EAAE,QAAQ,cAAc,YAAY,CAAC;AAAA,IAC9D;AACA,aAAe,iBAAiB,MAAM;AAAA;AAClC,cAAM,EAAE,MAAM,IAAI,OAAO;AACzB,cAAM,EAAE,UAAU,QAAQ,OAAO,IAAI,sBAAsB;AAC3D,cAAM,CAAC,kBAAkB,SAAS,IAAI,MAAM,gBAAgB,QAAQ;AACpE,cAAM,WAAW,KAAK,OAAO,MAAM;AACnC,cAAM,iBAAiB,MAAM,YAAY,QAAQ,QAAQ;AACzD,YAAI;AACA,gBAAM,cAAc,MAAM,MAAM,OAAO,gBAAgB,iBAClD,QAAQ,4DAA4D,CAAC,GAAG,aAAa,MAAM,WAAW,MAAM,iBAAiB;AAC9H,kBAAM,MAAM,OAAO,OAAO;AAC1B,kBAAM,cAAc,KAAK,MAAM,EAAE,IAAI;AAAA,cACjC,MAAM,IAAI,IAAI,MAAM;AAAA,cACpB,QAAQ,IAAI,IAAI,QAAQ;AAAA,cACxB,QAAQ,IAAI,IAAI,QAAQ;AAAA,YAC5B,CAAC;AACD,gBAAI,MAAM;AACN,0BAAY,IAAI,SAAS,WAAW,EAAE,GAAG,IAAI;AAAA,YACjD;AACA,gBAAI,cAAc;AACd,qBAAO,YAAY,OAAO,aAAa,UAAU,CAAC,EAAE,KAAK,CAAC;AAAA,YAC9D;AACA,mBAAO,YAAY,OAAO,MAAM;AAAA,UACpC,CAAC,EACI,QAAQ,qBAAqB,QAAQ,EACrC,QAAQ,oBAAoB,OAAO,OAAO,EAAE,OAAO,OAAO,CAAC,EAC3D,QAAQ,gFAAgF,CAAC,GAAG,WAAW,iBAAiB;AACzH,kBAAM,MAAM,2BAA2B,SAAS;AAChD,mBAAO,KAAK,QAAQ,GAAG,EAAE,OAAO,aAAa,KAAK,CAAC;AAAA,UACvD,CAAC,CAAC;AAEF,iBAAO,IAAI,YAAY,KAAK,aAAa,SAAS;AAClD,iBAAO;AAAA,QACX,SACO,KAAK;AACR,kBAAQ,MAAM,2BAA2B,cAAc,KAAK,GAAG;AAC/D,cAAI,SAAS,OAAO,4BAA4B;AAAA,QACpD;AAAA,MACJ;AAAA;AACA,aAAS,cAAc,MAAM,aAAa;AA7Y1C;AA8YI,cAAO,iBAAY,WAAW,MAAM,MAAM,CAAC,MAApC,YAAyC;AAAA,IACpD;AACA,aAAS,oBAAoB;AACzB,YAAM,cAAc,CAAC;AACrB,UAAI,CAAC,8BAA8B,GAAG;AAClC,eAAO;AAAA,MACX;AACA,YAAM,EAAE,MAAM,IAAI,OAAO;AACzB,YAAM,EAAE,OAAO,IAAI,sBAAsB;AACzC,YAAM,oBAAoB,MAAM,sBAAsB,SAAS,cAAc,MAAM,CAAC;AACpF,UAAI,CAAC,mBAAmB;AACpB,cAAM,IAAI,8BAA8B,oCAAoC;AAAA,MAChF;AACA,eAAS,MAAM,gBAAgB,mBAAmB,CAAC,SAAS;AACxD,YAAI,gBAAgB,SAAS,OAAO;AAChC,gBAAM,OAAO,gBAAgB,MAAM,MAAM;AACzC,cAAI,MAAM;AACN,kBAAM,aAAa,WAAW,MAAM,MAAM;AAC1C,wBAAY,UAAU,IAAI;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAEA,QAAM,iCAAN,cAA6C,MAAM;AAAA,IACnD;AAQA,aAAe,kBAAkB,MAAM;AAAA;AACnC,cAAM,EAAE,MAAM,IAAI,OAAO;AACzB,cAAM,EAAE,UAAU,QAAQ,OAAO,IAAI,uBAAuB;AAC5D,cAAM,CAAC,kBAAkB,SAAS,IAAI,MAAM,gBAAgB,QAAQ;AACpE,cAAM,WAAW,KAAK,OAAO,MAAM;AACnC,cAAM,iBAAiB,MAAM,YAAY,QAAQ,QAAQ;AACzD,YAAI;AACA,gBAAM,cAAc,MAAM,MAAM,OAAO,gBAAgB,iBAClD,QAAQ,4DAA4D,CAAC,GAAG,aAAa,MAAM,WAAW,MAAM,iBAAiB;AAC9H,kBAAM,MAAM,OAAO,OAAO;AAC1B,kBAAM,cAAc,KAAK,MAAM,EAAE,IAAI;AAAA,cACjC,MAAM,IAAI,IAAI,MAAM;AAAA,cACpB,QAAQ,IAAI,IAAI,QAAQ;AAAA,cACxB,QAAQ,IAAI,IAAI,QAAQ;AAAA,YAC5B,CAAC;AACD,gBAAI,MAAM;AACN,0BAAY,IAAI,SAAS,WAAW,EAAE,GAAG,IAAI;AAAA,YACjD;AACA,gBAAI,cAAc;AACd,qBAAO,YAAY,OAAO,aAAa,UAAU,CAAC,EAAE,KAAK,CAAC;AAAA,YAC9D;AACA,mBAAO,YAAY,OAAO,MAAM;AAAA,UACpC,CAAC,EACI,QAAQ,oBAAoB,QAAQ,EACpC,QAAQ,oBAAoB,OAAO,OAAO,EAAE,OAAO,OAAO,CAAC,EAC3D,QAAQ,qBAAqB,QAAQ,CAAC;AAE3C,iBAAO,IAAI,YAAY,KAAK,aAAa,SAAS;AAClD,iBAAO;AAAA,QACX,SACO,KAAK;AACR,kBAAQ,MAAM,2BAA2B,cAAc,KAAK,GAAG;AAC/D,cAAI,SAAS,OAAO,4BAA4B;AAAA,QACpD;AAAA,MACJ;AAAA;AACA,aAAS,eAAe,MAAM,cAAc;AAnd5C;AAodI,cAAO,kBAAa,WAAW,MAAM,OAAO,CAAC,MAAtC,YAA2C;AAAA,IACtD;AACA,aAAS,qBAAqB;AAC1B,YAAM,eAAe,CAAC;AACtB,UAAI,CAAC,+BAA+B,GAAG;AACnC,eAAO;AAAA,MACX;AACA,YAAM,EAAE,MAAM,IAAI,OAAO;AACzB,YAAM,EAAE,OAAO,IAAI,uBAAuB;AAC1C,YAAM,qBAAqB,MAAM,sBAAsB,SAAS,cAAc,MAAM,CAAC;AACrF,UAAI,CAAC,oBAAoB;AACrB,cAAM,IAAI,+BAA+B,qCAAqC;AAAA,MAClF;AACA,eAAS,MAAM,gBAAgB,oBAAoB,CAAC,SAAS;AACzD,YAAI,gBAAgB,SAAS,OAAO;AAChC,gBAAM,OAAO,gBAAgB,MAAM,OAAO;AAC1C,cAAI,MAAM;AACN,kBAAM,aAAa,WAAW,MAAM,OAAO;AAC3C,yBAAa,UAAU,IAAI;AAAA,UAC/B;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAEA,QAAM,mCAAN,cAA+C,MAAM;AAAA,IACrD;AAQA,aAAe,oBAAoB,MAAM;AAAA;AACrC,cAAM,EAAE,MAAM,IAAI,OAAO;AACzB,cAAM,EAAE,UAAU,QAAQ,OAAO,IAAI,yBAAyB;AAC9D,cAAM,CAAC,kBAAkB,SAAS,IAAI,MAAM,gBAAgB,QAAQ;AACpE,cAAM,WAAW,KAAK,OAAO,MAAM;AACnC,cAAM,iBAAiB,MAAM,YAAY,QAAQ,QAAQ;AACzD,YAAI;AACA,gBAAM,cAAc,MAAM,MAAM,OAAO,gBAAgB,iBAClD,QAAQ,4DAA4D,CAAC,GAAG,aAAa,MAAM,WAAW,MAAM,iBAAiB;AAC9H,kBAAM,MAAM,OAAO,OAAO;AAC1B,kBAAM,cAAc,KAAK,MAAM,EAAE,IAAI;AAAA,cACjC,MAAM,IAAI,IAAI,MAAM;AAAA,cACpB,QAAQ,IAAI,IAAI,QAAQ;AAAA,cACxB,QAAQ,IAAI,IAAI,QAAQ;AAAA,YAC5B,CAAC;AACD,gBAAI,MAAM;AACN,0BAAY,IAAI,SAAS,WAAW,EAAE,GAAG,IAAI;AAAA,YACjD;AACA,gBAAI,cAAc;AACd,qBAAO,YAAY,OAAO,aAAa,UAAU,CAAC,EAAE,KAAK,CAAC;AAAA,YAC9D;AACA,mBAAO,YAAY,OAAO,MAAM;AAAA,UACpC,CAAC,EACI,QAAQ,oBAAoB,QAAQ,EACpC,QAAQ,oBAAoB,OAAO,OAAO,EAAE,OAAO,OAAO,CAAC,EAC3D,QAAQ,qBAAqB,QAAQ,CAAC;AAE3C,iBAAO,IAAI,YAAY,KAAK,aAAa,SAAS;AAClD,iBAAO;AAAA,QACX,SACO,KAAK;AACR,kBAAQ,MAAM,2BAA2B,cAAc,KAAK,GAAG;AAC/D,cAAI,SAAS,OAAO,4BAA4B;AAAA,QACpD;AAAA,MACJ;AAAA;AACA,aAAS,iBAAiB,MAAM,WAAW;AAzhB3C;AA0hBI,cAAO,eAAU,WAAW,MAAM,SAAS,CAAC,MAArC,YAA0C;AAAA,IACrD;AACA,aAAS,uBAAuB;AAC5B,YAAM,YAAY,CAAC;AACnB,UAAI,CAAC,iCAAiC,GAAG;AACrC,eAAO;AAAA,MACX;AACA,YAAM,EAAE,MAAM,IAAI,OAAO;AACzB,YAAM,EAAE,OAAO,IAAI,yBAAyB;AAC5C,YAAM,kBAAkB,MAAM,sBAAsB,SAAS,cAAc,MAAM,CAAC;AAClF,UAAI,CAAC,iBAAiB;AAClB,cAAM,IAAI,iCAAiC,uCAAuC;AAAA,MACtF;AACA,eAAS,MAAM,gBAAgB,iBAAiB,CAAC,SAAS;AACtD,YAAI,gBAAgB,SAAS,OAAO;AAChC,gBAAM,OAAO,gBAAgB,MAAM,SAAS;AAC5C,cAAI,MAAM;AACN,kBAAM,aAAa,WAAW,MAAM,SAAS;AAC7C,sBAAU,UAAU,IAAI;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAEA,QAAM,gCAAN,cAA4C,MAAM;AAAA,IAClD;AAQA,aAAe,iBAAiB,MAAM;AAAA;AAClC,cAAM,EAAE,MAAM,IAAI,OAAO;AACzB,cAAM,EAAE,UAAU,QAAQ,OAAO,IAAI,sBAAsB;AAC3D,cAAM,CAAC,kBAAkB,SAAS,IAAI,MAAM,gBAAgB,QAAQ;AACpE,cAAM,WAAW,KAAK,OAAO,MAAM;AACnC,cAAM,iBAAiB,MAAM,YAAY,QAAQ,QAAQ;AACzD,YAAI;AACA,gBAAM,cAAc,MAAM,MAAM,OAAO,gBAAgB,iBAClD,QAAQ,4DAA4D,CAAC,GAAG,aAAa,MAAM,WAAW,MAAM,iBAAiB;AAC9H,kBAAM,MAAM,OAAO,OAAO;AAC1B,kBAAM,cAAc,KAAK,MAAM,EAAE,IAAI;AAAA,cACjC,MAAM,IAAI,IAAI,MAAM;AAAA,cACpB,QAAQ,IAAI,IAAI,QAAQ;AAAA,cACxB,QAAQ,IAAI,IAAI,QAAQ;AAAA,YAC5B,CAAC;AACD,gBAAI,MAAM;AACN,0BAAY,IAAI,SAAS,WAAW,EAAE,GAAG,IAAI;AAAA,YACjD;AACA,gBAAI,cAAc;AACd,qBAAO,YAAY,OAAO,aAAa,UAAU,CAAC,EAAE,KAAK,CAAC;AAAA,YAC9D;AACA,mBAAO,YAAY,OAAO,MAAM;AAAA,UACpC,CAAC,EACI,QAAQ,oBAAoB,QAAQ,EACpC,QAAQ,oBAAoB,OAAO,OAAO,EAAE,OAAO,OAAO,CAAC,EAC3D,QAAQ,qBAAqB,QAAQ,CAAC;AAE3C,iBAAO,IAAI,YAAY,KAAK,aAAa,SAAS;AAClD,iBAAO;AAAA,QACX,SACO,KAAK;AACR,kBAAQ,MAAM,2BAA2B,cAAc,KAAK,GAAG;AAC/D,cAAI,SAAS,OAAO,4BAA4B;AAAA,QACpD;AAAA,MACJ;AAAA;AACA,aAAS,cAAc,MAAM,aAAa;AA/lB1C;AAgmBI,cAAO,iBAAY,WAAW,MAAM,MAAM,CAAC,MAApC,YAAyC;AAAA,IACpD;AACA,aAAS,oBAAoB;AACzB,YAAM,cAAc,CAAC;AACrB,UAAI,CAAC,8BAA8B,GAAG;AAClC,eAAO;AAAA,MACX;AACA,YAAM,EAAE,MAAM,IAAI,OAAO;AACzB,YAAM,EAAE,OAAO,IAAI,sBAAsB;AACzC,YAAM,oBAAoB,MAAM,sBAAsB,SAAS,cAAc,MAAM,CAAC;AACpF,UAAI,CAAC,mBAAmB;AACpB,cAAM,IAAI,8BAA8B,oCAAoC;AAAA,MAChF;AACA,eAAS,MAAM,gBAAgB,mBAAmB,CAAC,SAAS;AACxD,YAAI,gBAAgB,SAAS,OAAO;AAChC,gBAAM,OAAO,gBAAgB,MAAM,MAAM;AACzC,cAAI,MAAM;AACN,kBAAM,aAAa,WAAW,MAAM,MAAM;AAC1C,wBAAY,UAAU,IAAI;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAEA,aAAS,+BAA+B;AAznBxC;AA0nBI,YAAM,EAAE,IAAI,IAAI;AAEhB,YAAM,mBAAmB,IAAI,gBAAgB,QAAQ,aAAa;AAClE,UAAI,oBAAoB,iBAAiB,SAAS;AAC9C,eAAO;AAAA,MACX;AAEA,YAAM,gBAAgB,IAAI,QAAQ,UAAU,gBAAgB;AAC5D,aAAO,mBAAiB,yBAAc,aAAd,mBAAwB,UAAxB,mBAA+B;AAAA,IAC3D;AAKA,aAAS,gCAAgC;AAxoBzC;AAyoBI,YAAM,EAAE,IAAI,IAAI;AAEhB,UAAI,IAAI,QAAQ,UAAU,UAAU,GAAG;AACnC,eAAO;AAAA,MACX;AAEA,YAAM,gBAAgB,IAAI,QAAQ,UAAU,gBAAgB;AAC5D,aAAO,mBAAiB,yBAAc,aAAd,mBAAwB,WAAxB,mBAAgC;AAAA,IAC5D;AACA,aAAS,iCAAiC;AAlpB1C;AAmpBI,YAAM,EAAE,IAAI,IAAI;AAEhB,YAAM,gBAAgB,IAAI,QAAQ,UAAU,gBAAgB;AAC5D,aAAO,mBAAiB,yBAAc,aAAd,mBAAwB,YAAxB,mBAAiC;AAAA,IAC7D;AACA,aAAS,mCAAmC;AAxpB5C;AAypBI,YAAM,EAAE,IAAI,IAAI;AAEhB,YAAM,gBAAgB,IAAI,QAAQ,UAAU,gBAAgB;AAC5D,aAAO,mBAAiB,yBAAc,aAAd,mBAAwB,cAAxB,mBAAmC;AAAA,IAC/D;AACA,aAAS,gCAAgC;AA9pBzC;AA+pBI,YAAM,EAAE,IAAI,IAAI;AAEhB,YAAM,gBAAgB,IAAI,QAAQ,UAAU,gBAAgB;AAC5D,aAAO,mBAAiB,yBAAc,aAAd,mBAAwB,WAAxB,mBAAgC;AAAA,IAC5D;AACA,aAAS,wBAAwB,aAAa;AAC1C,YAAM,cAAc;AAAA,QAChB,KAAK;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,QACT,MAAM;AAAA,MACV,EAAE,WAAW;AACb,aAAO,YAAY;AAAA,IACvB;AACA,aAAS,mBAAmB,aAAa,MAAM;AAC3C,YAAM,WAAW;AAAA,QACb,KAAKF;AAAA,QACL,OAAO;AAAA,QACP,MAAM;AAAA,MACV;AACA,aAAO,SAAS,WAAW,EAAE,IAAI;AAAA,IACrC;AAEA,YAAQ,4BAA4B;AACpC,YAAQ,8BAA8B;AACtC,YAAQ,gCAAgC;AACxC,YAAQ,6BAA6B;AACrC,YAAQ,6BAA6B;AACrC,YAAQ,+BAA+B;AACvC,YAAQ,iCAAiC;AACzC,YAAQ,mCAAmC;AAC3C,YAAQ,gCAAgC;AACxC,YAAQ,gCAAgC;AACxC,YAAQ,kBAAkBA;AAC1B,YAAQ,oBAAoB;AAC5B,YAAQ,qBAAqB;AAC7B,YAAQ,sBAAsB;AAC9B,YAAQ,mBAAmB;AAC3B,YAAQ,mBAAmB;AAC3B,YAAQ,mBAAmBE;AAC3B,YAAQ,qBAAqB;AAC7B,YAAQ,uBAAuB;AAC/B,YAAQ,oBAAoB;AAC5B,YAAQ,oBAAoB;AAC5B,YAAQ,eAAeD;AACvB,YAAQ,uBAAuB;AAC/B,YAAQ,kBAAkB;AAC1B,YAAQ,kBAAkB;AAC1B,YAAQ,aAAa;AACrB,YAAQ,iBAAiB;AACzB,YAAQ,yBAAyB;AACjC,YAAQ,0BAA0B;AAClC,YAAQ,mBAAmB;AAC3B,YAAQ,2BAA2B;AACnC,YAAQ,kBAAkB;AAC1B,YAAQ,gBAAgB;AACxB,YAAQ,wBAAwB;AAChC,YAAQ,gBAAgB;AACxB,YAAQ,wBAAwB;AAAA;AAAA;;;AC1tBhC;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA4C;AAC5C,4CAIO;AAEP,IAAqB,sBAArB,cAAiD,uBAAO;AAAA,EACpD,YAAY,KAAU,UAA0B;AAC5C,UAAM,KAAK,QAAQ;AAAA,EACvB;AAAA,EAEM,SAAS;AAAA;AACX,WAAK;AAAA,QACD,KAAK,IAAI,UAAU,GAAG,iBAAiB,MAAY;AAC/C,gBAAM,KAAK,2BAA2B;AAAA,QAC1C,EAAC;AAAA,MACL;AAAA,IACJ;AAAA;AAAA,EAEM,6BAA6B;AAAA;AAC/B,UAAI;AACA,cAAM,SAAS,OAAO,OAAO;AAG7B,cAAM,iBAAa,wDAAiB;AAGpC,cAAM,mBAAe,oDAAa,QAAQ,UAAU;AAGpD,YAAI,CAAC,cAAc;AACf,oBAAM,uDAAgB,MAAM;AAC5B,kBAAQ,IAAI,oBAAoB;AAAA,QACpC;AAAA,MACJ,SAAS,OAAO;AACZ,gBAAQ,MAAM,8BAA8B,KAAK;AAAA,MACrD;AAAA,IACJ;AAAA;AAAA,EAEA,WAAW;AACP,YAAQ,IAAI,iCAAiC;AAAA,EACjD;AACJ;",
  "names": ["format", "folder", "template", "createDailyNote", "getDailyNote", "getAllDailyNotes"]
}
